
- name: diable current nodejs or default nodejs version in server
  ansible.builtin.command: dnf module disable nodejs -y

- name: enabling required nodejs version
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop:
  - nodejs
  - mysql

- name: create expense user
  ansible.builtin.user:
    name: expense

- name: includefrom common role
  include_role:
    name: common
    tasks_from: main

# - name: create app directory
#   amsbile.builtin.file:
#     path: /app
#     state: directory

# - name: download the backend code
#   ansible.builtin.get_url: 
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: unzip the backend code
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes

- name: install the dependencies
  community.general.npm:
    path: /app

- name: copy backend service
  ansible.builtin.template: # it will search in template folder
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
# in our file any variables or available we will keep that file in templates folder. like backend,service.j2 then we will use ansible.builtin.template.
# in our file any variables are not available we will keep that file in file folder. then we will use ansible.builtin.copy module.
- name: install python libarires
  ansible.builtin.pip:
    name: "{{ item}}"
    executable: pip3.9
  loop:
  - cryptography
  - pymysql

- name: import sql data
  community.mysql.mysql_db:
    state: import
    name: all
    login_user: "{{ mysql_user }}"
    login_password: "{{ mysql_password }}"
    loginhost: "{{ MYSQL_HOST}}"  #domain name or ip addres of sql server
    target: /app/schema/backend.sql

- name: daemon reload and restart the service
  ansible.builtin.service:
    enabled: true
    state: restarted
    daemon_reload: true
    name: backend